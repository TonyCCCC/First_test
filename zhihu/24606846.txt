今天网上开始预售除夕前一天的火车票。
这几天，办公室的小伙伴们每天准点蹲在电脑前，不停地刷新页面，可最终还是眼睁睁看着一秒之后就显示“无票”了。(╯‵□′)╯︵┻━┻
无奈之下，只能寄希望于之后几天会有些余票或者退票被放出来。但总不能接下来一直开着网页不停刷吧……好在我们还有 Python 啊，就让程序定时去查咯。
之前也放过查票的代码，参见：
刷票有风险，抢购需谨慎
在公众号(crossincode)里回复 
查票
，可获取本篇完整示例代码。
1. 我们用 Chrome 进入 12306 余票查询网页，打开开发者工具（右键“审查元素”或者 F12/ctrl+shift+i），菜单栏选择 Network。
2. 填写出发地和目的地以及出发日后（这里以1月11日上海到北京为例），点击“查询”，在 Network 栏目下，可以看到发出的所有请求。仔细观察后发现，其中一个带有 query 字样的地址就是余票的查询接口，从信息栏中 Headers 分页下的 Request URL 可以看到它的完整地址。
这里注意，12306 现在有两个查询余票的页面，不同页面上看到的接口地址是不一样的。分别是：
旧版：
https://
kyfw.12306.cn/otn/lcxxc
x/query?purpose_codes=ADULT&queryDate=2017-01-11&from_station=BJP&to_station=BJP
新版：
https://
kyfw.12306.cn/otn/leftT
icket/queryZ?leftTicketDTO.train_date=2017-01-11&leftTicketDTO.from_station=SHH&leftTicketDTO.to_station=BJP&purpose_codes=ADULT
两个接口的参数和返回值也不相同。这里我们用新版的接口。
在 Python 2 中，我们可以通过 urllib2 直接访问接口，获取返回数据。Python 3 可以使用 urllib.request 或者 requests 库。
req_url
 
=
 
'https://kyfw.12306.cn/otn/leftTicket/queryZ?leftTicketDTO.train_date=2017-01-11&leftTicketDTO.from_station=SHH&leftTicketDTO.to_station=BJP&purpose_codes=ADULT'


resp
 
=
 
urllib2
.
urlopen
(
req_url
)


resp_info
 
=
 
resp
.
read
()


print
 
resp_info


在程序中输出结果，或者直接在浏览器中打开这个请求地址，可以看到返回值。
如果请求时报错：
<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)>
需要加上以下代码，忽略 ssl 证书的验证：
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

这些密密麻麻看上去有点像是字典格式的数据就是 json 数据。通过浏览器 json 插件或者搜索下 json 在线解析工具，可以让这些数据显示得更人性化。
不难看出，我们需要的车次余票信息就在每一车次全部相关信息中，而这也信息以字典列表的形式，储存在“data”的值中。因此，我们若要查询余票，就该先把 json 格式的数据转为字典，获取其中的 data 列表，然后遍历列表，查询车次，最后从该车次对应的字典字段中，查询余票。
info_json
 
=
 
json
.
loads
(
resp_info
)


info
 
=
 
info_json
[
'data'
]


for
 
train_data
 
in
 
info
:

    
train
 
=
 
train_data
[
'queryLeftNewDTO'
]

    
if
 
train
[
'station_train_code'
]
 
==
 
TRAIN
:

        
print
 
'商务座：'
,
 
train
[
'swz_num'
]

        
print
 
'特等座'
,
 
train
[
'tz_num'
]

        
...

        
print
 
'无座'
,
 
train
[
'wz_num'
]

        
print
 
'其它'
,
 
train
[
'qt_num'
]


为了让程序一直查询下去，我们用一个条件为 True 的 while 循环。再配合上 time 模块的 sleep 方法（参数单位为秒），让程序每查询一次就休息一会儿。毕竟我们只是想要定时刷一下页面，没必要一直发送请求。
while
 
True
:

    
# 查询余票代码

    
time
.
sleep
(
600
)


现在，在你的电脑上运行代码，就可以每隔 10 分钟自动去访问一次页面，看看是否有新的余票放出。当然，你得根据自己的需要，去修改请求地址里的日期和出发、到达站的代号。
在公众号『Crossin的编程教室』（crossincode）里回复 
查票
，获取本篇的完整示例代码。
如果你还希望程序在刷出票后，能给你发个邮件提醒的话，请查看我们之前的文章：
简单三步，用 Python 发邮件 - Crossin的编程教室 - 知乎专栏
 或者在公众号里回复 
邮件
。
说明几点：
这个程序只是定时访问公开页面，查询余票信息，无需登录和验证码，但并不能自动替你购票。
请设定适当的查询间隔，没必要高频刷新。合理使用此脚本不会比手动刷新页面给网站带来更大压力，只是免去了你时刻关注页面的烦躁。
掌握这个方法，也可以查询其他购票网站，或用在类似的页面信息查询上。
由于最近在春运购票高峰，接口访问可能会比较慢，甚至请求失败。
这不是抢票工具，它做不到，我们也不建议使用类似工具干扰正常的购票秩序。
最后，祝大家身体健康，都能买上票，高高兴兴回家过年！
其他文章及回答：
Python 与 Excel 不得不说的事 - Crossin的编程教室 - 知乎专栏
Python-Excel 模块哪家强？- Crossin的编程教室 - 知乎专栏
爆款游戏《贪吃蛇大作战》的 Python 实现 - Crossin的编程教室 - 知乎专栏
NBA 举办编程马拉松 - 数据分析时代的到来 - Crossin的文章 - 知乎专栏
想用 Python 做数据分析？先玩玩这个再说 - Crossin的文章 - 知乎专栏
用 Python 实现你的量化交易策略 - Crossin的文章 - 知乎专栏
学习编程的过程中可能会走哪些弯路，有哪些经验可以参考？ - Crossin 的回答
你是如何自学 Python 的？ - Crossin 的回答
Python 抓取网页乱码原因分析 - Crossin的编程教室 - 知乎专栏
Crossin的编程教室
微信ID：crossincode
论坛：
Crossin的编程教室
QQ群：167478032
